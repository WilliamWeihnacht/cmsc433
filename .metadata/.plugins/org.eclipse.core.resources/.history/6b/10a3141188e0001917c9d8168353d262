package cmsc433;

import java.util.List;

/**
 * Cooks are simulation actors that have at least one field, a name.
 * When running, a cook attempts to retrieve outstanding orders placed
 * by Eaters and process them.
 */
public class Cook implements Runnable {
	private final String name;

	/**
	 * You can feel free to modify this constructor.  It must
	 * take at least the name, but may take other parameters
	 * if you would find adding them useful. 
	 *
	 * @param: the name of the cook
	 */
	public Cook(String name) {
		this.name = name;
	}

	public String toString() {
		return name;
	}

	/**
	 * This method executes as follows.  The cook tries to retrieve
	 * orders placed by Customers.  For each order, a List<Food>, the
	 * cook submits each Food item in the List to an appropriate
	 * Machine, by calling makeFood().  Once all machines have
	 * produced the desired Food, the order is complete, and the Customer
	 * is notified.  The cook can then go to process the next order.
	 * If during its execution the cook is interrupted (i.e., some
	 * other thread calls the interrupt() method on it, which could
	 * raise InterruptedException if the cook is blocking), then it
	 * terminates.
	 */
	public void run() {

		Simulation.logEvent(SimulationEvent.cookStarting(this));
		try {
			while(true) {
				//YOUR CODE GOES HERE...

				//remove order from order queue
				List<Food> order;
				synchronized (Simulation.orderLock) {
					order = Simulation.orders.remove(0);
					//Simulation.logEvent(SimulationEvent.cookReceivedOrder(this, order, orderNumber));
				}

				//place each item in order into appropriate machine
				if (order != null) {
					for (Food item : order) {
						//call make food
						if (item.equals(FoodType.wings)) {
							Simulation.fryer.makeFood();
						} else if (item.equals(FoodType.pizza)) {
							Simulation.oven.makeFood();
						} else if (item.equals(FoodType.sub)) {
							Simulation.grillPress.makeFood();
						} else if (item.equals(FoodType.soda)) {
							Simulation.fountain.makeFood();
						}
						//Simulation.logEvent(SimulationEvent.cookFinishedFood(this, item, orderNumber)));
					}
				}

				//once food is done notify customer use notify **NOT notify all TODO				


			}
		}
		catch(InterruptedException e) {
			// This code assumes the provided code in the Simulation class
			// that interrupts each cook thread when all customers are done.
			// You might need to change this if you change how things are
			// done in the Simulation class.
			Simulation.logEvent(SimulationEvent.cookEnding(this));
		}
	}
}
